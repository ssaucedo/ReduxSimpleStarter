import React, { Component } from 'react';
import { connect } from 'react-redux';
import { selectBook } from '../actions/index';
// to make sure that the action generated by the action creator
// actually ends up flowing though all the different reducers.
import { bindActionCreators } from 'redux';

// Component ---> into a container.
class BookList extends Component {

    renderList() {
      return this.props.books.map((book) =>{
        return (
          <li
          key={book.title}
          onClick={() => this.props.selectBook(book)}
          className="list-group-item">
          {book.title}
          </li>
        );
      });
    }

    render() {
      return (
        <ul className="list-group col-sm-4">
        {this.renderList()}
        </ul>
      )
    }
}

function mapStateToProps(state) {
  return {
    books: state.books
  };
}

// Anything return from this function will end up as props on the
// BookList container
function mapDispatchToProps(dispatch) {
     // Whenever selectBook is called, the result should be passed
     // to all of our books. I make sure that the result of the action flows through
     // the dispatch function. Takes all the actions a (like a kind of funnel) and
     // spits them back out to all the reducers in our application
     return bindActionCreators({ selectBook: selectBook }, dispatch );
}



// It needs to know about this new dispatch method, selectBook. Make it available as a prop.
export default connect(mapStateToProps, mapDispatchToProps)(BookList);
